// Generated by jextract

package cpufeatures.natives;

import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.MemoryLayout;
import java.lang.invoke.MethodHandle;

class constants$0 {

    static final FunctionDescriptor GetX86Info$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("a"),
            Constants$root.C_INT$LAYOUT.withName("b"),
            Constants$root.C_INT$LAYOUT.withName("c")
        ).withName("features"),
        Constants$root.C_INT$LAYOUT.withName("family"),
        Constants$root.C_INT$LAYOUT.withName("model"),
        Constants$root.C_INT$LAYOUT.withName("stepping"),
        MemoryLayout.sequenceLayout(13, Constants$root.C_CHAR$LAYOUT).withName("vendor"),
        MemoryLayout.sequenceLayout(49, Constants$root.C_CHAR$LAYOUT).withName("brand_string"),
        MemoryLayout.paddingLayout(16)
    ));
    static final MethodHandle GetX86Info$MH = RuntimeHelper.downcallHandle(
        "GetX86Info",
        constants$0.GetX86Info$FUNC
    );
    static final FunctionDescriptor GetX86CacheInfo$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("size"),
        MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("level"),
            Constants$root.C_INT$LAYOUT.withName("cache_type"),
            Constants$root.C_INT$LAYOUT.withName("cache_size"),
            Constants$root.C_INT$LAYOUT.withName("ways"),
            Constants$root.C_INT$LAYOUT.withName("line_size"),
            Constants$root.C_INT$LAYOUT.withName("tlb_entries"),
            Constants$root.C_INT$LAYOUT.withName("partitioning")
        )).withName("levels")
    ));
    static final MethodHandle GetX86CacheInfo$MH = RuntimeHelper.downcallHandle(
        "GetX86CacheInfo",
        constants$0.GetX86CacheInfo$FUNC
    );
    static final FunctionDescriptor GetX86Microarchitecture$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetX86Microarchitecture$MH = RuntimeHelper.downcallHandle(
        "GetX86Microarchitecture",
        constants$0.GetX86Microarchitecture$FUNC
    );
    static final FunctionDescriptor FillX86BrandString$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FillX86BrandString$MH = RuntimeHelper.downcallHandle(
        "FillX86BrandString",
        constants$0.FillX86BrandString$FUNC
    );
    static final FunctionDescriptor GetX86FeaturesEnumValue$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle GetX86FeaturesEnumValue$MH = RuntimeHelper.downcallHandle(
        "GetX86FeaturesEnumValue",
        constants$0.GetX86FeaturesEnumValue$FUNC
    );
    static final FunctionDescriptor GetX86FeaturesEnumName$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle GetX86FeaturesEnumName$MH = RuntimeHelper.downcallHandle(
        "GetX86FeaturesEnumName",
        constants$0.GetX86FeaturesEnumName$FUNC
    );
}


