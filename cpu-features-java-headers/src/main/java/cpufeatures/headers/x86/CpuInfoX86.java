// Generated by jextract

package cpufeatures.headers.x86;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class CpuInfoX86  {

    /* package-private */ CpuInfoX86() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int CPU_FEATURES_COMPILED_X86_AES() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_F16C() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_BMI() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_BMI2() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_SSE() {
        return (int)1L;
    }
    public static int CPU_FEATURES_COMPILED_X86_SSE2() {
        return (int)1L;
    }
    public static int CPU_FEATURES_COMPILED_X86_SSE3() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_SSSE3() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_SSE4_1() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_SSE4_2() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_AVX() {
        return (int)0L;
    }
    public static int CPU_FEATURES_COMPILED_X86_AVX2() {
        return (int)0L;
    }
    public static int CPU_FEATURES_MAX_CACHE_LEVEL() {
        return (int)10L;
    }
    public static int CPU_FEATURE_CACHE_NULL() {
        return (int)0L;
    }
    public static int CPU_FEATURE_CACHE_DATA() {
        return (int)1L;
    }
    public static int CPU_FEATURE_CACHE_INSTRUCTION() {
        return (int)2L;
    }
    public static int CPU_FEATURE_CACHE_UNIFIED() {
        return (int)3L;
    }
    public static int CPU_FEATURE_CACHE_TLB() {
        return (int)4L;
    }
    public static int CPU_FEATURE_CACHE_DTLB() {
        return (int)5L;
    }
    public static int CPU_FEATURE_CACHE_STLB() {
        return (int)6L;
    }
    public static int CPU_FEATURE_CACHE_PREFETCH() {
        return (int)7L;
    }
    public static MethodHandle GetX86Info$MH() {
        return RuntimeHelper.requireNonNull(constants$0.GetX86Info$MH,"GetX86Info");
    }
    public static MemorySegment GetX86Info ( SegmentAllocator allocator) {
        var mh$ = GetX86Info$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetX86CacheInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0.GetX86CacheInfo$MH,"GetX86CacheInfo");
    }
    public static MemorySegment GetX86CacheInfo ( SegmentAllocator allocator) {
        var mh$ = GetX86CacheInfo$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int X86_UNKNOWN() {
        return (int)0L;
    }
    public static int ZHAOXIN_ZHANGJIANG() {
        return (int)1L;
    }
    public static int ZHAOXIN_WUDAOKOU() {
        return (int)2L;
    }
    public static int ZHAOXIN_LUJIAZUI() {
        return (int)3L;
    }
    public static int ZHAOXIN_YONGFENG() {
        return (int)4L;
    }
    public static int INTEL_80486() {
        return (int)5L;
    }
    public static int INTEL_P5() {
        return (int)6L;
    }
    public static int INTEL_LAKEMONT() {
        return (int)7L;
    }
    public static int INTEL_CORE() {
        return (int)8L;
    }
    public static int INTEL_PNR() {
        return (int)9L;
    }
    public static int INTEL_NHM() {
        return (int)10L;
    }
    public static int INTEL_ATOM_BNL() {
        return (int)11L;
    }
    public static int INTEL_WSM() {
        return (int)12L;
    }
    public static int INTEL_SNB() {
        return (int)13L;
    }
    public static int INTEL_IVB() {
        return (int)14L;
    }
    public static int INTEL_ATOM_SMT() {
        return (int)15L;
    }
    public static int INTEL_HSW() {
        return (int)16L;
    }
    public static int INTEL_BDW() {
        return (int)17L;
    }
    public static int INTEL_SKL() {
        return (int)18L;
    }
    public static int INTEL_CCL() {
        return (int)19L;
    }
    public static int INTEL_ATOM_GMT() {
        return (int)20L;
    }
    public static int INTEL_ATOM_GMT_PLUS() {
        return (int)21L;
    }
    public static int INTEL_ATOM_TMT() {
        return (int)22L;
    }
    public static int INTEL_KBL() {
        return (int)23L;
    }
    public static int INTEL_CFL() {
        return (int)24L;
    }
    public static int INTEL_WHL() {
        return (int)25L;
    }
    public static int INTEL_CML() {
        return (int)26L;
    }
    public static int INTEL_CNL() {
        return (int)27L;
    }
    public static int INTEL_ICL() {
        return (int)28L;
    }
    public static int INTEL_TGL() {
        return (int)29L;
    }
    public static int INTEL_SPR() {
        return (int)30L;
    }
    public static int INTEL_ADL() {
        return (int)31L;
    }
    public static int INTEL_RCL() {
        return (int)32L;
    }
    public static int INTEL_RPL() {
        return (int)33L;
    }
    public static int INTEL_KNIGHTS_M() {
        return (int)34L;
    }
    public static int INTEL_KNIGHTS_L() {
        return (int)35L;
    }
    public static int INTEL_KNIGHTS_F() {
        return (int)36L;
    }
    public static int INTEL_KNIGHTS_C() {
        return (int)37L;
    }
    public static int INTEL_NETBURST() {
        return (int)38L;
    }
    public static int AMD_HAMMER() {
        return (int)39L;
    }
    public static int AMD_K10() {
        return (int)40L;
    }
    public static int AMD_K11() {
        return (int)41L;
    }
    public static int AMD_K12() {
        return (int)42L;
    }
    public static int AMD_BOBCAT() {
        return (int)43L;
    }
    public static int AMD_PILEDRIVER() {
        return (int)44L;
    }
    public static int AMD_STREAMROLLER() {
        return (int)45L;
    }
    public static int AMD_EXCAVATOR() {
        return (int)46L;
    }
    public static int AMD_BULLDOZER() {
        return (int)47L;
    }
    public static int AMD_JAGUAR() {
        return (int)48L;
    }
    public static int AMD_PUMA() {
        return (int)49L;
    }
    public static int AMD_ZEN() {
        return (int)50L;
    }
    public static int AMD_ZEN_PLUS() {
        return (int)51L;
    }
    public static int AMD_ZEN2() {
        return (int)52L;
    }
    public static int AMD_ZEN3() {
        return (int)53L;
    }
    public static int AMD_ZEN4() {
        return (int)54L;
    }
    public static int X86_MICROARCHITECTURE_LAST_() {
        return (int)55L;
    }
    public static MethodHandle GetX86Microarchitecture$MH() {
        return RuntimeHelper.requireNonNull(constants$0.GetX86Microarchitecture$MH,"GetX86Microarchitecture");
    }
    public static int GetX86Microarchitecture ( Addressable info) {
        var mh$ = GetX86Microarchitecture$MH();
        try {
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillX86BrandString$MH() {
        return RuntimeHelper.requireNonNull(constants$0.FillX86BrandString$MH,"FillX86BrandString");
    }
    public static void FillX86BrandString ( Addressable brand_string) {
        var mh$ = FillX86BrandString$MH();
        try {
            mh$.invokeExact(brand_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int X86_FPU() {
        return (int)0L;
    }
    public static int X86_TSC() {
        return (int)1L;
    }
    public static int X86_CX8() {
        return (int)2L;
    }
    public static int X86_CLFSH() {
        return (int)3L;
    }
    public static int X86_MMX() {
        return (int)4L;
    }
    public static int X86_AES() {
        return (int)5L;
    }
    public static int X86_ERMS() {
        return (int)6L;
    }
    public static int X86_F16C() {
        return (int)7L;
    }
    public static int X86_FMA4() {
        return (int)8L;
    }
    public static int X86_FMA3() {
        return (int)9L;
    }
    public static int X86_VAES() {
        return (int)10L;
    }
    public static int X86_VPCLMULQDQ() {
        return (int)11L;
    }
    public static int X86_BMI1() {
        return (int)12L;
    }
    public static int X86_HLE() {
        return (int)13L;
    }
    public static int X86_BMI2() {
        return (int)14L;
    }
    public static int X86_RTM() {
        return (int)15L;
    }
    public static int X86_RDSEED() {
        return (int)16L;
    }
    public static int X86_CLFLUSHOPT() {
        return (int)17L;
    }
    public static int X86_CLWB() {
        return (int)18L;
    }
    public static int X86_SSE() {
        return (int)19L;
    }
    public static int X86_SSE2() {
        return (int)20L;
    }
    public static int X86_SSE3() {
        return (int)21L;
    }
    public static int X86_SSSE3() {
        return (int)22L;
    }
    public static int X86_SSE4_1() {
        return (int)23L;
    }
    public static int X86_SSE4_2() {
        return (int)24L;
    }
    public static int X86_SSE4A() {
        return (int)25L;
    }
    public static int X86_AVX() {
        return (int)26L;
    }
    public static int X86_AVX_VNNI() {
        return (int)27L;
    }
    public static int X86_AVX2() {
        return (int)28L;
    }
    public static int X86_AVX512F() {
        return (int)29L;
    }
    public static int X86_AVX512CD() {
        return (int)30L;
    }
    public static int X86_AVX512ER() {
        return (int)31L;
    }
    public static int X86_AVX512PF() {
        return (int)32L;
    }
    public static int X86_AVX512BW() {
        return (int)33L;
    }
    public static int X86_AVX512DQ() {
        return (int)34L;
    }
    public static int X86_AVX512VL() {
        return (int)35L;
    }
    public static int X86_AVX512IFMA() {
        return (int)36L;
    }
    public static int X86_AVX512VBMI() {
        return (int)37L;
    }
    public static int X86_AVX512VBMI2() {
        return (int)38L;
    }
    public static int X86_AVX512VNNI() {
        return (int)39L;
    }
    public static int X86_AVX512BITALG() {
        return (int)40L;
    }
    public static int X86_AVX512VPOPCNTDQ() {
        return (int)41L;
    }
    public static int X86_AVX512_4VNNIW() {
        return (int)42L;
    }
    public static int X86_AVX512_4VBMI2() {
        return (int)43L;
    }
    public static int X86_AVX512_SECOND_FMA() {
        return (int)44L;
    }
    public static int X86_AVX512_4FMAPS() {
        return (int)45L;
    }
    public static int X86_AVX512_BF16() {
        return (int)46L;
    }
    public static int X86_AVX512_VP2INTERSECT() {
        return (int)47L;
    }
    public static int X86_AVX512_FP16() {
        return (int)48L;
    }
    public static int X86_AMX_BF16() {
        return (int)49L;
    }
    public static int X86_AMX_TILE() {
        return (int)50L;
    }
    public static int X86_AMX_INT8() {
        return (int)51L;
    }
    public static int X86_PCLMULQDQ() {
        return (int)52L;
    }
    public static int X86_SMX() {
        return (int)53L;
    }
    public static int X86_SGX() {
        return (int)54L;
    }
    public static int X86_CX16() {
        return (int)55L;
    }
    public static int X86_SHA() {
        return (int)56L;
    }
    public static int X86_POPCNT() {
        return (int)57L;
    }
    public static int X86_MOVBE() {
        return (int)58L;
    }
    public static int X86_RDRND() {
        return (int)59L;
    }
    public static int X86_DCA() {
        return (int)60L;
    }
    public static int X86_SS() {
        return (int)61L;
    }
    public static int X86_ADX() {
        return (int)62L;
    }
    public static int X86_LZCNT() {
        return (int)63L;
    }
    public static int X86_GFNI() {
        return (int)64L;
    }
    public static int X86_MOVDIRI() {
        return (int)65L;
    }
    public static int X86_MOVDIR64B() {
        return (int)66L;
    }
    public static int X86_FS_REP_MOV() {
        return (int)67L;
    }
    public static int X86_FZ_REP_MOVSB() {
        return (int)68L;
    }
    public static int X86_FS_REP_STOSB() {
        return (int)69L;
    }
    public static int X86_FS_REP_CMPSB_SCASB() {
        return (int)70L;
    }
    public static int X86_LAST_() {
        return (int)71L;
    }
    public static MethodHandle GetX86FeaturesEnumValue$MH() {
        return RuntimeHelper.requireNonNull(constants$0.GetX86FeaturesEnumValue$MH,"GetX86FeaturesEnumValue");
    }
    public static int GetX86FeaturesEnumValue ( Addressable features,  int value) {
        var mh$ = GetX86FeaturesEnumValue$MH();
        try {
            return (int)mh$.invokeExact(features, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetX86FeaturesEnumName$MH() {
        return RuntimeHelper.requireNonNull(constants$0.GetX86FeaturesEnumName$MH,"GetX86FeaturesEnumName");
    }
    public static MemoryAddress GetX86FeaturesEnumName ( int x0) {
        var mh$ = GetX86FeaturesEnumName$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetX86MicroarchitectureName$MH() {
        return RuntimeHelper.requireNonNull(constants$1.GetX86MicroarchitectureName$MH,"GetX86MicroarchitectureName");
    }
    public static MemoryAddress GetX86MicroarchitectureName ( int x0) {
        var mh$ = GetX86MicroarchitectureName$MH();
        try {
            return (MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment CPU_FEATURES_VENDOR_GENUINE_INTEL() {
        return constants$1.CPU_FEATURES_VENDOR_GENUINE_INTEL$SEGMENT;
    }
    public static MemorySegment CPU_FEATURES_VENDOR_AUTHENTIC_AMD() {
        return constants$1.CPU_FEATURES_VENDOR_AUTHENTIC_AMD$SEGMENT;
    }
    public static MemorySegment CPU_FEATURES_VENDOR_HYGON_GENUINE() {
        return constants$1.CPU_FEATURES_VENDOR_HYGON_GENUINE$SEGMENT;
    }
    public static MemorySegment CPU_FEATURES_VENDOR_CENTAUR_HAULS() {
        return constants$1.CPU_FEATURES_VENDOR_CENTAUR_HAULS$SEGMENT;
    }
    public static MemorySegment CPU_FEATURES_VENDOR_SHANGHAI() {
        return constants$1.CPU_FEATURES_VENDOR_SHANGHAI$SEGMENT;
    }
}


